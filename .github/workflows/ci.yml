name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  go:
    name: Go lint & test
    runs-on: ubuntu-latest
    if: ${{ hashFiles('**/go.mod') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go fmt (verify)
        run: |
          files=$(find . -name '*.go' -not -path "*/vendor/*")
          if [ -z "$files" ]; then
            exit 0
          fi
          fmt_out=$(gofmt -l $files)
          if [ -n "$fmt_out" ]; then
            echo "Run 'gofmt' on the Go sources:" >&2
            echo "$fmt_out" >&2
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

      - name: Go test
        run: go test ./...

  typescript:
    name: TypeScript lint, test & build (${{ matrix.project.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project:
          - name: orchestrator
            path: services/orchestrator
            node: '20'
          - name: cli
            path: apps/cli
            node: '20'
    defaults:
      run:
        working-directory: ${{ matrix.project.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.project.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.project.node }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Start Docker daemon
        if: matrix.project.name == 'orchestrator'
        run: |
          sudo systemctl start docker
          docker info

      - name: Install dependencies
        run: npm ci

      - name: Lint (if configured)
        run: npm run lint --if-present

      - name: Type check (tsc)
        run: |
          if [ -f tsconfig.json ]; then
            npx tsc --noEmit
          else
            echo "tsconfig.json not found, skipping type check"
          fi

      - name: Run tests
        run: npm run test --if-present -- --run

      - name: Run queue integration tests
        if: matrix.project.name == 'orchestrator'
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
        run: npm run test -- PlanQueueRuntime.rabbitmq PlanQueueRuntime.kafka

      - name: Build (if configured)
        if: matrix.project.name != 'cli'
        run: npm run build --if-present

      - name: Build CLI bundle
        if: matrix.project.name == 'cli'
        run: npm run build

  rust:
    name: Rust fmt, lint & test
    runs-on: ubuntu-latest
    if: ${{ hashFiles('**/Cargo.toml') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libglib2.0-dev

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy rustfmt

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cargo fmt
        run: cargo fmt --all -- --check

      - name: Cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Cargo test
        run: cargo test --all
