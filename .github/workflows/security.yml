name: Security Scans

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: '0 3 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  trivy-fs:
    name: Trivy filesystem scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.25.0
        with:
          scan-type: fs
          format: table
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  trivy-image:
    name: Trivy image scan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: gateway-api
            context: apps/gateway-api
            dockerfile: apps/gateway-api/Dockerfile
          - name: orchestrator
            context: services/orchestrator
            dockerfile: services/orchestrator/Dockerfile
          - name: indexer
            context: services/indexer
            dockerfile: services/indexer/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine if Dockerfile exists
        id: has_dockerfile
        run: |
          if [ -f "${{ matrix.image.dockerfile }}" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Skipping image scan for ${{ matrix.image.name }} (Dockerfile missing)." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Build image for scanning
        if: steps.has_dockerfile.outputs.exists == 'true'
        run: |
          docker build -t scan-${{ matrix.image.name }}:pr ${{ matrix.image.context }} -f ${{ matrix.image.dockerfile }}

      - name: Scan image with Trivy
        if: steps.has_dockerfile.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@0.25.0
        with:
          image-ref: scan-${{ matrix.image.name }}:pr
          format: table
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

  gitleaks:
    name: Gitleaks secret scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner --redact

  codeql:
    name: CodeQL analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:multi'
