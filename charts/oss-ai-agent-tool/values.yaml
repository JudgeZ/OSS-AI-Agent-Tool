image:
  repo: ghcr.io/yourorg/oss-ai-agent-tool
  tag: "0.1.0"
  pullPolicy: IfNotPresent

runMode: consumer

messaging:
  type: rabbitmq

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

networkPolicy:
  enabled: true
  ingress:
    - from:
        - podSelector: {}
        - namespaceSelector: {}
  defaultDenyEgress: true
  egressRules:
    # Allow DNS queries to kube-dns inside kube-system
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow OTLP/HTTP traffic to the bundled Jaeger collector
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: jaeger
      ports:
        - protocol: TCP
          port: 4317

gatewayApi:
  replicas: 2
  containerPort: 8080
  service:
    type: ClusterIP
    port: 80
  env: {}
  tls:
    enabled: false
    secretName: ""
    mountPath: /etc/orchestrator/tls
    clientCertFile: client.crt
    clientKeyFile: client.key
    caFile: ca.crt
  resources:
    requests: { cpu: "100m", memory: "128Mi" }
    limits: { cpu: "500m", memory: "256Mi" }

orchestrator:
  replicas: 2
  containerPort: 4000
  service:
    type: ClusterIP
    port: 4000
  env:
    LOCAL_SECRETS_PATH: /app/config/secrets/local/secrets.json
    LOCAL_SECRETS_PASSPHRASE: change-me
  tls:
    enabled: false
    secretName: ""
    mountPath: /etc/orchestrator/tls
    certFile: tls.crt
    keyFile: tls.key
    caFile: ca.crt
    requestClientCert: true
  hpa:
    enabled: true
    min: 2
    max: 10
    targetQueueDepth: 5
    metricName: queue_depth
  resources:
    requests: { cpu: "200m", memory: "256Mi" }
    limits: { cpu: "1", memory: "512Mi" }

indexer:
  enabled: true
  replicas: 1
  containerPort: 7070
  logLevel: info
  env: {}
  service:
    type: ClusterIP
    port: 7070
  resources:
    requests: { cpu: "100m", memory: "128Mi" }
    limits: { cpu: "500m", memory: "256Mi" }

redis:
  enabled: true
  image: bitnami/redis:7.2.5
  persistence:
    enabled: false
    size: 1Gi
    storageClass: ""
  resources: {}

postgres:
  enabled: true
  image: postgres:15-alpine
  database: ossaat
  username: ossaat
  password: ossaat
  persistence:
    size: 8Gi
    storageClass: ""
  resources: {}

rabbitmq:
  enabled: true
  image: rabbitmq:3.13-management
  username: guest
  password: guest
  host: ""
  port: 5672
  scheme: amqp
  vhost: ""
  url: ""
  persistence:
    enabled: false
    size: 5Gi
    storageClass: ""
  resources: {}

kafka:
  enabled: false
  image: bitnami/kafka:3.7.0
  persistence:
    enabled: false
    size: 10Gi
    storageClass: ""
  resources: {}

jaeger:
  enabled: true
  image: jaegertracing/all-in-one:1.57
  resources: {}

langfuse:
  enabled: true
  replicas: 1
  image: langfuse/langfuse:2.14.1
  publicUrl: http://localhost:3000
  nextAuthSecret: changeme
  salt: changeme
  telemetryEnabled: "false"
  resources: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
          service: gateway
  tls: []
