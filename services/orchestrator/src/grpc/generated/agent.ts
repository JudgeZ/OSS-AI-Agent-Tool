// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: agent.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "agent.v1";

export interface ToolInvocation {
  invocationId: string;
  planId: string;
  stepId: string;
  tool: string;
  capability: string;
  capabilityLabel: string;
  labels: string[];
  inputJson: string;
  metadata: { [key: string]: string };
  timeoutSeconds: number;
  approvalRequired: boolean;
}

export interface ToolInvocation_MetadataEntry {
  key: string;
  value: string;
}

export interface ToolEvent {
  invocationId: string;
  planId: string;
  stepId: string;
  state: string;
  summary: string;
  outputJson: string;
  occurredAt: string;
}

export interface ExecuteToolRequest {
  invocation?: ToolInvocation | undefined;
}

export interface ExecuteToolResponse {
  events: ToolEvent[];
}

function createBaseToolInvocation(): ToolInvocation {
  return {
    invocationId: "",
    planId: "",
    stepId: "",
    tool: "",
    capability: "",
    capabilityLabel: "",
    labels: [],
    inputJson: "",
    metadata: {},
    timeoutSeconds: 0,
    approvalRequired: false,
  };
}

export const ToolInvocation = {
  encode(message: ToolInvocation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.invocationId !== "") {
      writer.uint32(10).string(message.invocationId);
    }
    if (message.planId !== "") {
      writer.uint32(18).string(message.planId);
    }
    if (message.stepId !== "") {
      writer.uint32(26).string(message.stepId);
    }
    if (message.tool !== "") {
      writer.uint32(34).string(message.tool);
    }
    if (message.capability !== "") {
      writer.uint32(42).string(message.capability);
    }
    if (message.capabilityLabel !== "") {
      writer.uint32(50).string(message.capabilityLabel);
    }
    for (const v of message.labels) {
      writer.uint32(58).string(v!);
    }
    if (message.inputJson !== "") {
      writer.uint32(66).string(message.inputJson);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      ToolInvocation_MetadataEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).ldelim();
    });
    if (message.timeoutSeconds !== 0) {
      writer.uint32(80).int32(message.timeoutSeconds);
    }
    if (message.approvalRequired !== false) {
      writer.uint32(88).bool(message.approvalRequired);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ToolInvocation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolInvocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.planId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stepId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tool = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.capability = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.capabilityLabel = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.inputJson = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = ToolInvocation_MetadataEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.metadata[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.timeoutSeconds = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.approvalRequired = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolInvocation {
    return {
      invocationId: isSet(object.invocationId) ? globalThis.String(object.invocationId) : "",
      planId: isSet(object.planId) ? globalThis.String(object.planId) : "",
      stepId: isSet(object.stepId) ? globalThis.String(object.stepId) : "",
      tool: isSet(object.tool) ? globalThis.String(object.tool) : "",
      capability: isSet(object.capability) ? globalThis.String(object.capability) : "",
      capabilityLabel: isSet(object.capabilityLabel) ? globalThis.String(object.capabilityLabel) : "",
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => globalThis.String(e)) : [],
      inputJson: isSet(object.inputJson) ? globalThis.String(object.inputJson) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      timeoutSeconds: isSet(object.timeoutSeconds) ? globalThis.Number(object.timeoutSeconds) : 0,
      approvalRequired: isSet(object.approvalRequired) ? globalThis.Boolean(object.approvalRequired) : false,
    };
  },

  toJSON(message: ToolInvocation): unknown {
    const obj: any = {};
    if (message.invocationId !== "") {
      obj.invocationId = message.invocationId;
    }
    if (message.planId !== "") {
      obj.planId = message.planId;
    }
    if (message.stepId !== "") {
      obj.stepId = message.stepId;
    }
    if (message.tool !== "") {
      obj.tool = message.tool;
    }
    if (message.capability !== "") {
      obj.capability = message.capability;
    }
    if (message.capabilityLabel !== "") {
      obj.capabilityLabel = message.capabilityLabel;
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.inputJson !== "") {
      obj.inputJson = message.inputJson;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.timeoutSeconds !== 0) {
      obj.timeoutSeconds = Math.round(message.timeoutSeconds);
    }
    if (message.approvalRequired !== false) {
      obj.approvalRequired = message.approvalRequired;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToolInvocation>, I>>(base?: I): ToolInvocation {
    return ToolInvocation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToolInvocation>, I>>(object: I): ToolInvocation {
    const message = createBaseToolInvocation();
    message.invocationId = object.invocationId ?? "";
    message.planId = object.planId ?? "";
    message.stepId = object.stepId ?? "";
    message.tool = object.tool ?? "";
    message.capability = object.capability ?? "";
    message.capabilityLabel = object.capabilityLabel ?? "";
    message.labels = object.labels?.map((e) => e) || [];
    message.inputJson = object.inputJson ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.timeoutSeconds = object.timeoutSeconds ?? 0;
    message.approvalRequired = object.approvalRequired ?? false;
    return message;
  },
};

function createBaseToolInvocation_MetadataEntry(): ToolInvocation_MetadataEntry {
  return { key: "", value: "" };
}

export const ToolInvocation_MetadataEntry = {
  encode(message: ToolInvocation_MetadataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ToolInvocation_MetadataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolInvocation_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolInvocation_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ToolInvocation_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToolInvocation_MetadataEntry>, I>>(base?: I): ToolInvocation_MetadataEntry {
    return ToolInvocation_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToolInvocation_MetadataEntry>, I>>(object: I): ToolInvocation_MetadataEntry {
    const message = createBaseToolInvocation_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseToolEvent(): ToolEvent {
  return { invocationId: "", planId: "", stepId: "", state: "", summary: "", outputJson: "", occurredAt: "" };
}

export const ToolEvent = {
  encode(message: ToolEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.invocationId !== "") {
      writer.uint32(10).string(message.invocationId);
    }
    if (message.planId !== "") {
      writer.uint32(18).string(message.planId);
    }
    if (message.stepId !== "") {
      writer.uint32(26).string(message.stepId);
    }
    if (message.state !== "") {
      writer.uint32(34).string(message.state);
    }
    if (message.summary !== "") {
      writer.uint32(42).string(message.summary);
    }
    if (message.outputJson !== "") {
      writer.uint32(50).string(message.outputJson);
    }
    if (message.occurredAt !== "") {
      writer.uint32(58).string(message.occurredAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ToolEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.planId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stepId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.state = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.summary = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.outputJson = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.occurredAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolEvent {
    return {
      invocationId: isSet(object.invocationId) ? globalThis.String(object.invocationId) : "",
      planId: isSet(object.planId) ? globalThis.String(object.planId) : "",
      stepId: isSet(object.stepId) ? globalThis.String(object.stepId) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
      outputJson: isSet(object.outputJson) ? globalThis.String(object.outputJson) : "",
      occurredAt: isSet(object.occurredAt) ? globalThis.String(object.occurredAt) : "",
    };
  },

  toJSON(message: ToolEvent): unknown {
    const obj: any = {};
    if (message.invocationId !== "") {
      obj.invocationId = message.invocationId;
    }
    if (message.planId !== "") {
      obj.planId = message.planId;
    }
    if (message.stepId !== "") {
      obj.stepId = message.stepId;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    if (message.outputJson !== "") {
      obj.outputJson = message.outputJson;
    }
    if (message.occurredAt !== "") {
      obj.occurredAt = message.occurredAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToolEvent>, I>>(base?: I): ToolEvent {
    return ToolEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToolEvent>, I>>(object: I): ToolEvent {
    const message = createBaseToolEvent();
    message.invocationId = object.invocationId ?? "";
    message.planId = object.planId ?? "";
    message.stepId = object.stepId ?? "";
    message.state = object.state ?? "";
    message.summary = object.summary ?? "";
    message.outputJson = object.outputJson ?? "";
    message.occurredAt = object.occurredAt ?? "";
    return message;
  },
};

function createBaseExecuteToolRequest(): ExecuteToolRequest {
  return { invocation: undefined };
}

export const ExecuteToolRequest = {
  encode(message: ExecuteToolRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.invocation !== undefined) {
      ToolInvocation.encode(message.invocation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteToolRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocation = ToolInvocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteToolRequest {
    return { invocation: isSet(object.invocation) ? ToolInvocation.fromJSON(object.invocation) : undefined };
  },

  toJSON(message: ExecuteToolRequest): unknown {
    const obj: any = {};
    if (message.invocation !== undefined) {
      obj.invocation = ToolInvocation.toJSON(message.invocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteToolRequest>, I>>(base?: I): ExecuteToolRequest {
    return ExecuteToolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteToolRequest>, I>>(object: I): ExecuteToolRequest {
    const message = createBaseExecuteToolRequest();
    message.invocation = (object.invocation !== undefined && object.invocation !== null)
      ? ToolInvocation.fromPartial(object.invocation)
      : undefined;
    return message;
  },
};

function createBaseExecuteToolResponse(): ExecuteToolResponse {
  return { events: [] };
}

export const ExecuteToolResponse = {
  encode(message: ExecuteToolResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.events) {
      ToolEvent.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteToolResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteToolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.events.push(ToolEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteToolResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => ToolEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: ExecuteToolResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => ToolEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteToolResponse>, I>>(base?: I): ExecuteToolResponse {
    return ExecuteToolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteToolResponse>, I>>(object: I): ExecuteToolResponse {
    const message = createBaseExecuteToolResponse();
    message.events = object.events?.map((e) => ToolEvent.fromPartial(e)) || [];
    return message;
  },
};

export type AgentServiceService = typeof AgentServiceService;
export const AgentServiceService = {
  executeTool: {
    path: "/agent.v1.AgentService/ExecuteTool",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ExecuteToolRequest) => Buffer.from(ExecuteToolRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ExecuteToolRequest.decode(value),
    responseSerialize: (value: ExecuteToolResponse) => Buffer.from(ExecuteToolResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ExecuteToolResponse.decode(value),
  },
} as const;

export interface AgentServiceServer extends UntypedServiceImplementation {
  executeTool: handleUnaryCall<ExecuteToolRequest, ExecuteToolResponse>;
}

export interface AgentServiceClient extends Client {
  executeTool(
    request: ExecuteToolRequest,
    callback: (error: ServiceError | null, response: ExecuteToolResponse) => void,
  ): ClientUnaryCall;
  executeTool(
    request: ExecuteToolRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ExecuteToolResponse) => void,
  ): ClientUnaryCall;
  executeTool(
    request: ExecuteToolRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ExecuteToolResponse) => void,
  ): ClientUnaryCall;
}

export const AgentServiceClient = makeGenericClientConstructor(
  AgentServiceService,
  "agent.v1.AgentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AgentServiceClient;
  service: typeof AgentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
