version: "3.9"

services:
  gateway:
    build:
      context: ./apps/gateway-api
      dockerfile: Dockerfile
    environment:
      ORCHESTRATOR_URL: http://orchestrator:4000
      INDEXER_URL: http://indexer:7070
      PORT: "8080"
    ports:
      - "8080:8080"
    depends_on:
      - orchestrator
    restart: unless-stopped

  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: "4000"
      RUN_MODE: consumer
      REDIS_URL: redis://redis:6379/0
      POSTGRES_URL: postgres://ossaat:ossaat@postgres:5432/ossaat
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      KAFKA_BROKERS: kafka:9092
      LANGFUSE_BASE_URL: http://langfuse:3000
      LANGFUSE_PUBLIC_KEY: dev-public
      LANGFUSE_SECRET_KEY: dev-secret
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    ports:
      - "4000:4000"
    depends_on:
      - redis
      - postgres
      - rabbitmq
      - kafka
    restart: unless-stopped

  indexer:
    build:
      context: ./services/indexer
      dockerfile: Dockerfile
    environment:
      RUST_LOG: info
    ports:
      - "7070:7070"
    restart: unless-stopped

  memory-svc:
    image: node:20-alpine
    working_dir: /workspace/services/memory-svc
    command: ["tail", "-f", "/dev/null"]
    security_opt:
      - no-new-privileges:true
    read_only: true
    volumes:
      - ./:/workspace:delegated

  redis:
    image: redis/redis-stack-server:7.2.0-v9
    security_opt:
      - no-new-privileges:true
    read_only: true
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  postgres:
    image: postgres:15-alpine
    security_opt:
      - no-new-privileges:true
    environment:
      POSTGRES_USER: ossaat
      POSTGRES_PASSWORD: ossaat
      POSTGRES_DB: ossaat
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.13-management
    security_opt:
      - no-new-privileges:true
    read_only: true
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  kafka:
    image: bitnami/kafka:3.7.0
    security_opt:
      - no-new-privileges:true
    read_only: true
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka

  jaeger:
    image: jaegertracing/all-in-one:1.57
    security_opt:
      - no-new-privileges:true
    read_only: true
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"

  langfuse:
    image: langfuse/langfuse:2.14.1
    security_opt:
      - no-new-privileges:true
    read_only: true
    environment:
      DATABASE_URL: postgres://ossaat:ossaat@postgres:5432/ossaat
      NEXTAUTH_SECRET: dev-secret
      NEXTAUTH_URL: http://localhost:3000
      SALT: dev-salt
      TELEMETRY_ENABLED: "false"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_started
    volumes:
      - langfuse-data:/app/.langfuse

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  kafka-data:
  langfuse-data:
